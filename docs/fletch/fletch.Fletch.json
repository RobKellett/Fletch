{"name":"Fletch","qualifiedName":"fletch/fletch.Fletch","comment":"<p>A convenience wrapper around a group of <a>fletch/dart-dom-html.Element</a>s.</p>\n<p>A <a>fletch/fletch.Fletch</a> object wraps one or more HTML elements, adding\nmany useful convenience functions to manipulate them. All\nfeatures of the Fletch library are accessed through this\nclass.</p>\n<p><a>fletch/fletch.Fletch</a> implements <a>fletch/dart-core.Iterable</a>, so its elements\ncan be accessed through normal indexing or iteration.</p>","isAbstract":false,"superclass":"dart-core.IterableBase","implements":[],"subclass":[],"variables":{"attr":{"name":"attr","qualifiedName":"fletch/fletch.Fletch.attr","comment":"<p>The attributes on this group of <a>dart-dom-html.Element</a>s.</p>\n<p>Attributes are accessed by indexing into their names.\nFor example:</p>\n<pre><code>$(\"img\").attr[\"src\"] = \"path/to/image.png\";\n</code></pre>\n<p>When multiple elements are selected, getting an attribute's\nvalue will only return the value for the first selected\nelement.</p>\n<p>When setting an attribute, all selected elements will be\naffected.</p>\n<p>When getting the value of an attribute that does not exist\nor does not have its value set, <code>null</code> will be returned.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"fletch/fletch.AttributeCollection","inner":[]}],"annotations":[]},"classes":{"name":"classes","qualifiedName":"fletch/fletch.Fletch.classes","comment":"<p>The classes on this group of <a>dart-dom-html.Element</a>s.</p>\n<p>The <code>add</code>, <code>remove</code>, and <code>toggle</code> functions are used to\nmanipulate classes on the selected elements. Adding\na class will not affect elements that already have that\nclass, and removing a class will not affect elements\nthat do not have that class. Toggling a class will add\nit to elements that do not have it and remove it from\nelements that do have it.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"fletch/fletch.ClassCollection","inner":[]}],"annotations":[]},"event":{"name":"event","qualifiedName":"fletch/fletch.Fletch.event","comment":"<p>The events on this group of <a>dart-dom-html.Element</a>s.</p>\n<p>Events are accessed by indexing into their names.</p>\n<p>The object returned is a functor representing the\nrequested event. Calling the functor will dispatch the\nevent.\nFor example:</p>\n<pre><code>$(\"button\").event[\"click\"]();\n</code></pre>\n<p>To begin listening for an event, pass your listener to\nthe <code>listen</code> method. Listeners accept two arguments:\n<code>event</code>, which is a reference to the <a>dart-dom-html.Event</a> being\ntriggered, and <code>self</code>, which is a reference to the\nelement triggering the event.\nFor example:</p>\n<pre><code>$(\"button\").event[\"click\"].listen((evt, self) =&gt; print(\"Clicked!\"));\n</code></pre>\n<p>You can dispatch and listen to custom events by\npassing your custom event names into the indexer.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"fletch/fletch.EventCollection","inner":[]}],"annotations":[]},"style":{"name":"style","qualifiedName":"fletch/fletch.Fletch.style","comment":"<p>The CSS styles on this group of <a>dart-dom-html.Element</a>s.</p>\n<p>Styles are accessed by indexing into their property names.\nFor example:</p>\n<pre><code>$(\"div\").style[\"font-family\"] = \"sans-serif\";\n</code></pre>\n<p>When multiple elements are selected, getting a style\nproperty's value will only return the value for the first\nselected element.</p>\n<p>When setting a style property, all selected elements will\nbe affected.</p>\n<p>Getting a style property's value will return its\n<em>computed</em> value, so inherited and calculated values are\nincluded.</p>\n<p>To set multiple style properties at once, call <a>fletch/fletch.Fletch.style</a> like\na function, passing in a map of property/value pairs.\nFor example:</p>\n<pre><code>$(\"div\").style({\n    \"font-family\": \"sans-serif\",\n    \"font-weight\": \"bold\"\n});\n</code></pre>","final":true,"static":false,"constant":false,"type":[{"outer":"fletch/fletch.StyleCollection","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{"checked=":{"name":"checked=","qualifiedName":"fletch/fletch.Fletch.checked=","comment":"","commentFrom":"fletch.Fletch.checked=","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"html=":{"name":"html=","qualifiedName":"fletch/fletch.Fletch.html=","comment":"","commentFrom":"fletch.Fletch.html=","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"content":{"name":"content","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"text=":{"name":"text=","qualifiedName":"fletch/fletch.Fletch.text=","comment":"","commentFrom":"fletch.Fletch.text=","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"content":{"name":"content","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"value=":{"name":"value=","qualifiedName":"fletch/fletch.Fletch.value=","comment":"","commentFrom":"fletch.Fletch.value=","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"getters":{"checked":{"name":"checked","qualifiedName":"fletch/fletch.Fletch.checked","comment":"<p>The checked state of the selected <a>fletch/dart-dom-html.Element</a>s.</p>\n<p>When multiple elements are selected, only the first\n<a>fletch/dart-dom-html.Element</a>'s checked state is returned.</p>\n<p>Setting a value will set it for all selected elements.</p>\n<p>Setting a radio button to be checked will un-check\nthe others in the radio button's group.</p>\n<p>This property only has meaning for checkboxes and\nradio buttons. For all other elements, this property\nwill always return <code>false</code> and assignments will be\nignored.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"children":{"name":"children","qualifiedName":"fletch/fletch.Fletch.children","comment":"<p>The children of the currently selected <a>fletch/dart-dom-html.Element</a>s.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"fletch/fletch.Fletch","inner":[]}],"parameters":{},"annotations":[]},"html":{"name":"html","qualifiedName":"fletch/fletch.Fletch.html","comment":"<p>The HTML content of the selected <a>fletch/dart-dom-html.Element</a>s.</p>\n<p>When multiple elements are selected, only the first\n<a>fletch/dart-dom-html.Element</a>'s content is returned.</p>\n<p>Setting a value will set it for all selected elements.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"iterator":{"name":"iterator","qualifiedName":"fletch/fletch.Fletch.iterator","comment":"<p><a>dart-core.Iterator</a> for the selected <a>fletch/dart-dom-html.Element</a>s.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Iterator","inner":[{"outer":"dart-dom-html.Element","inner":[]}]}],"parameters":{},"annotations":[]},"length":{"name":"length","qualifiedName":"fletch/fletch.Fletch.length","comment":"<p>The number of selected <a>fletch/dart-dom-html.Element</a>s.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"parent":{"name":"parent","qualifiedName":"fletch/fletch.Fletch.parent","comment":"<p>The parent(s) of the currently selected <a>fletch/dart-dom-html.Element</a>s.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"fletch/fletch.Fletch","inner":[]}],"parameters":{},"annotations":[]},"text":{"name":"text","qualifiedName":"fletch/fletch.Fletch.text","comment":"<p>The plain text content of the selected <a>fletch/dart-dom-html.Element</a>s.</p>\n<p>When multiple elements are selected, the value of\n<a>fletch/fletch.Fletch.text</a> will be all of the <a>fletch/dart-dom-html.Element</a>s' text values\njoined together with spaces.</p>\n<p>Setting a value will set it for all selected elements.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"value":{"name":"value","qualifiedName":"fletch/fletch.Fletch.value","comment":"<p>The value of the selected <a>fletch/dart-dom-html.Element</a>s.</p>\n<p>For input elements, this represents the value entered\nby the user.</p>\n<p>When multiple elements are selected, only the first\n<a>fletch/dart-dom-html.Element</a>'s value is returned.</p>\n<p>Setting a value will set it for all selected elements.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"fletch/fletch.Fletch.Fletch-","comment":"<p>Constructs a <a>fletch/fletch.Fletch</a> wrapper from any valid source of\n<a>fletch/dart-dom-html.Element</a>s.</p>\n<p>Valid sources are:</p><ul><li>\n<p>A <a>dart-core.String</a> CSS selector used to match elements</p></li><li>\n<p>A <a>dart-core.String</a> of HTML to parse into an element</p></li><li>\n<p>An <a>fletch/dart-dom-html.Element</a></p></li><li>\n<p>An <a>dart-core.Iterable</a> of <a>fletch/dart-dom-html.Element</a></p></li><li>\n<p>A <a>fletch/dart-dom-html.HtmlDocument</a></p></li><li>\n<p>A <a>fletch/fletch.Fletch</a> (will simply return the original object)</p></li></ul>\n<p>If a second parameter is supplied, it will be used as\nthe top-level element to run the CSS selector as. For\nother sources, the second parameter is ignored.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"fletch/fletch.Fletch","inner":[]}],"parameters":{"selection":{"name":"selection","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"context":{"name":"context","optional":true,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{"[]":{"name":"[]","qualifiedName":"fletch/fletch.Fletch.[]","comment":"<p>Gets an <a>fletch/dart-dom-html.Element</a> from the selection at the specified index.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.Element","inner":[]}],"parameters":{"index":{"name":"index","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"append":{"name":"append","qualifiedName":"fletch/fletch.Fletch.append","comment":"<p>Appends one or more <a>fletch/dart-dom-html.Element</a>s as children of the\nselected <a>fletch/dart-dom-html.Element</a>s.</p>\n<p><a>fletch/fletch.Fletch.append.selection</a> may be any selector accepted by the\n<a>fletch/fletch.Fletch</a> constructor.</p>\n<p>When multiple elements are selected, the provided\nelements will be appended to the first selected\nelement. All other selected elements will have\nclones of the provided elements appended to them.\nNote that event listeners on the elements are <em>not</em>\ncloned.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"selection":{"name":"selection","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"appendTo":{"name":"appendTo","qualifiedName":"fletch/fletch.Fletch.appendTo","comment":"<p>Appends the selected <a>fletch/dart-dom-html.Element</a>s as children to\none or more other <a>fletch/dart-dom-html.Element</a>s.</p>\n<p><a>fletch/fletch.Fletch.appendTo.selection</a> may be any selector accepted by the\n<a>fletch/fletch.Fletch</a> constructor.</p>\n<p>When multiple elements are provided, the selected\nelements will be appended to the first provided\nelement. All other provided elements will have\nclones of the selected elements appended to them.\nNote that event listeners on the elements are <em>not</em>\ncloned.</p>\n<p>For convenience, all cloned elements are added\nto the list of currently selected <a>fletch/dart-dom-html.Element</a>s,\nallowing them to be manipulated by the current\n<a>fletch/fletch.Fletch</a> instance.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"selection":{"name":"selection","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"elementAt":{"name":"elementAt","qualifiedName":"fletch/fletch.Fletch.elementAt","comment":"<p>Gets an <a>fletch/dart-dom-html.Element</a> from the selection at the specified index.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.Element","inner":[]}],"parameters":{"index":{"name":"index","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"remove":{"name":"remove","qualifiedName":"fletch/fletch.Fletch.remove","comment":"<p>Removes all selected <a>fletch/dart-dom-html.Element</a>s from the DOM.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"serialize":{"name":"serialize","qualifiedName":"fletch/fletch.Fletch.serialize","comment":"<p>Encodes the selected form elements as a URL-safe <a>dart-core.String</a>.</p>\n<p>The encoded string can used as part of a query string to\nsubmit the form via GET or POST requests.\nAn example of this format:</p>\n<pre><code>name1=this+is+an+example1&amp;name2=another+example\n</code></pre>\n<p>Only elements with a set <code>name</code> attribute and a set value\nwill appear in the string. Additionally, unchecked\ncheckboxes and radio buttons will be excluded.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"blur":{"name":"blur","qualifiedName":"fletch/fletch.Fletch.blur","comment":"<p>Shorthand for <code>event[\"blur\"]</code></p>","commentFrom":"","inheritedFrom":"fletch.IterableBase+_EventMixin.blur","static":false,"abstract":false,"constant":false,"return":[{"outer":"fletch/fletch.EventFunctor","inner":[]}],"parameters":{},"annotations":[]},"change":{"name":"change","qualifiedName":"fletch/fletch.Fletch.change","comment":"<p>Shorthand for <code>event[\"change\"]</code></p>","commentFrom":"","inheritedFrom":"fletch.IterableBase+_EventMixin.change","static":false,"abstract":false,"constant":false,"return":[{"outer":"fletch/fletch.EventFunctor","inner":[]}],"parameters":{},"annotations":[]},"click":{"name":"click","qualifiedName":"fletch/fletch.Fletch.click","comment":"<p>Shorthand for <code>event[\"click\"]</code></p>","commentFrom":"","inheritedFrom":"fletch.IterableBase+_EventMixin.click","static":false,"abstract":false,"constant":false,"return":[{"outer":"fletch/fletch.EventFunctor","inner":[]}],"parameters":{},"annotations":[]},"doubleClick":{"name":"doubleClick","qualifiedName":"fletch/fletch.Fletch.doubleClick","comment":"<p>Shorthand for <code>event[\"dblclick\"]</code></p>","commentFrom":"","inheritedFrom":"fletch.IterableBase+_EventMixin.doubleClick","static":false,"abstract":false,"constant":false,"return":[{"outer":"fletch/fletch.EventFunctor","inner":[]}],"parameters":{},"annotations":[]},"first":{"name":"first","qualifiedName":"fletch/fletch.Fletch.first","comment":"<p>Returns the first element.</p>\n<p>If <code>this</code> is empty throws a <a>dart-core.StateError</a>. Otherwise this method is\nequivalent to <code>this.elementAt(0)</code></p>","commentFrom":"dart-core.Iterable.first","inheritedFrom":"dart-core.IterableBase.first","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"focus":{"name":"focus","qualifiedName":"fletch/fletch.Fletch.focus","comment":"<p>Shorthand for <code>event[\"focus\"]</code></p>","commentFrom":"","inheritedFrom":"fletch.IterableBase+_EventMixin.focus","static":false,"abstract":false,"constant":false,"return":[{"outer":"fletch/fletch.EventFunctor","inner":[]}],"parameters":{},"annotations":[]},"focusIn":{"name":"focusIn","qualifiedName":"fletch/fletch.Fletch.focusIn","comment":"<p>Shorthand for <code>event[\"focusin\"]</code></p>","commentFrom":"","inheritedFrom":"fletch.IterableBase+_EventMixin.focusIn","static":false,"abstract":false,"constant":false,"return":[{"outer":"fletch/fletch.EventFunctor","inner":[]}],"parameters":{},"annotations":[]},"focusOut":{"name":"focusOut","qualifiedName":"fletch/fletch.Fletch.focusOut","comment":"<p>Shorthand for <code>event[\"focusOut\"]</code></p>","commentFrom":"","inheritedFrom":"fletch.IterableBase+_EventMixin.focusOut","static":false,"abstract":false,"constant":false,"return":[{"outer":"fletch/fletch.EventFunctor","inner":[]}],"parameters":{},"annotations":[]},"hashCode":{"name":"hashCode","qualifiedName":"fletch/fletch.Fletch.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>fletch/fletch.Fletch.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"hover":{"name":"hover","qualifiedName":"fletch/fletch.Fletch.hover","comment":"<p>Shorthand for <code>event[\"hover\"]</code></p>","commentFrom":"","inheritedFrom":"fletch.IterableBase+_EventMixin.hover","static":false,"abstract":false,"constant":false,"return":[{"outer":"fletch/fletch.EventFunctor","inner":[]}],"parameters":{},"annotations":[]},"isEmpty":{"name":"isEmpty","qualifiedName":"fletch/fletch.Fletch.isEmpty","comment":"<p>Returns true if there is no element in this collection.</p>","commentFrom":"dart-core.Iterable.isEmpty","inheritedFrom":"dart-core.IterableBase.isEmpty","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"isNotEmpty":{"name":"isNotEmpty","qualifiedName":"fletch/fletch.Fletch.isNotEmpty","comment":"<p>Returns true if there is at least one element in this collection.</p>","commentFrom":"dart-core.Iterable.isNotEmpty","inheritedFrom":"dart-core.IterableBase.isNotEmpty","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"iterator":{"name":"iterator","qualifiedName":"fletch/fletch.Fletch.iterator","comment":"<p>Returns an Iterator that iterates over this Iterable object.</p>","commentFrom":"","inheritedFrom":"dart-core.Iterable.iterator","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Iterator","inner":[{"outer":"dart-core.Iterable.E","inner":[]}]}],"parameters":{},"annotations":[]},"keyDown":{"name":"keyDown","qualifiedName":"fletch/fletch.Fletch.keyDown","comment":"<p>Shorthand for <code>event[\"keydown\"]</code></p>","commentFrom":"","inheritedFrom":"fletch.IterableBase+_EventMixin.keyDown","static":false,"abstract":false,"constant":false,"return":[{"outer":"fletch/fletch.EventFunctor","inner":[]}],"parameters":{},"annotations":[]},"keyPress":{"name":"keyPress","qualifiedName":"fletch/fletch.Fletch.keyPress","comment":"<p>Shorthand for <code>event[\"keypress\"]</code></p>","commentFrom":"","inheritedFrom":"fletch.IterableBase+_EventMixin.keyPress","static":false,"abstract":false,"constant":false,"return":[{"outer":"fletch/fletch.EventFunctor","inner":[]}],"parameters":{},"annotations":[]},"keyUp":{"name":"keyUp","qualifiedName":"fletch/fletch.Fletch.keyUp","comment":"<p>Shorthand for <code>event[\"keyup\"]</code></p>","commentFrom":"","inheritedFrom":"fletch.IterableBase+_EventMixin.keyUp","static":false,"abstract":false,"constant":false,"return":[{"outer":"fletch/fletch.EventFunctor","inner":[]}],"parameters":{},"annotations":[]},"last":{"name":"last","qualifiedName":"fletch/fletch.Fletch.last","comment":"<p>Returns the last element.</p>\n<p>If <code>this</code> is empty throws a <a>dart-core.StateError</a>.</p>","commentFrom":"dart-core.Iterable.last","inheritedFrom":"dart-core.IterableBase.last","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"length":{"name":"length","qualifiedName":"fletch/fletch.Fletch.length","comment":"<p>Returns the number of elements in this.</p>\n<p>Counting all elements may be involve running through all elements and can\ntherefore be slow.</p>","commentFrom":"dart-core.Iterable.length","inheritedFrom":"dart-core.IterableBase.length","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"load":{"name":"load","qualifiedName":"fletch/fletch.Fletch.load","comment":"<p>Shorthand for <code>event[\"load\"]</code></p>","commentFrom":"","inheritedFrom":"fletch.IterableBase+_EventMixin.load","static":false,"abstract":false,"constant":false,"return":[{"outer":"fletch/fletch.EventFunctor","inner":[]}],"parameters":{},"annotations":[]},"mouseDown":{"name":"mouseDown","qualifiedName":"fletch/fletch.Fletch.mouseDown","comment":"<p>Shorthand for <code>event[\"mousedown\"]</code></p>","commentFrom":"","inheritedFrom":"fletch.IterableBase+_EventMixin.mouseDown","static":false,"abstract":false,"constant":false,"return":[{"outer":"fletch/fletch.EventFunctor","inner":[]}],"parameters":{},"annotations":[]},"mouseMove":{"name":"mouseMove","qualifiedName":"fletch/fletch.Fletch.mouseMove","comment":"<p>Shorthand for <code>event[\"mousemove\"]</code></p>","commentFrom":"","inheritedFrom":"fletch.IterableBase+_EventMixin.mouseMove","static":false,"abstract":false,"constant":false,"return":[{"outer":"fletch/fletch.EventFunctor","inner":[]}],"parameters":{},"annotations":[]},"mouseOut":{"name":"mouseOut","qualifiedName":"fletch/fletch.Fletch.mouseOut","comment":"<p>Shorthand for <code>event[\"mouseout\"]</code></p>","commentFrom":"","inheritedFrom":"fletch.IterableBase+_EventMixin.mouseOut","static":false,"abstract":false,"constant":false,"return":[{"outer":"fletch/fletch.EventFunctor","inner":[]}],"parameters":{},"annotations":[]},"mouseOver":{"name":"mouseOver","qualifiedName":"fletch/fletch.Fletch.mouseOver","comment":"<p>Shorthand for <code>event[\"mouseover\"]</code></p>","commentFrom":"","inheritedFrom":"fletch.IterableBase+_EventMixin.mouseOver","static":false,"abstract":false,"constant":false,"return":[{"outer":"fletch/fletch.EventFunctor","inner":[]}],"parameters":{},"annotations":[]},"mouseUp":{"name":"mouseUp","qualifiedName":"fletch/fletch.Fletch.mouseUp","comment":"<p>Shorthand for <code>event[\"mouseup\"]</code></p>","commentFrom":"","inheritedFrom":"fletch.IterableBase+_EventMixin.mouseUp","static":false,"abstract":false,"constant":false,"return":[{"outer":"fletch/fletch.EventFunctor","inner":[]}],"parameters":{},"annotations":[]},"resize":{"name":"resize","qualifiedName":"fletch/fletch.Fletch.resize","comment":"<p>Shorthand for <code>event[\"resize\"]</code></p>","commentFrom":"","inheritedFrom":"fletch.IterableBase+_EventMixin.resize","static":false,"abstract":false,"constant":false,"return":[{"outer":"fletch/fletch.EventFunctor","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"fletch/fletch.Fletch.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]},"scroll":{"name":"scroll","qualifiedName":"fletch/fletch.Fletch.scroll","comment":"<p>Shorthand for <code>event[\"scroll\"]</code></p>","commentFrom":"","inheritedFrom":"fletch.IterableBase+_EventMixin.scroll","static":false,"abstract":false,"constant":false,"return":[{"outer":"fletch/fletch.EventFunctor","inner":[]}],"parameters":{},"annotations":[]},"select":{"name":"select","qualifiedName":"fletch/fletch.Fletch.select","comment":"<p>Shorthand for <code>event[\"select\"]</code></p>","commentFrom":"","inheritedFrom":"fletch.IterableBase+_EventMixin.select","static":false,"abstract":false,"constant":false,"return":[{"outer":"fletch/fletch.EventFunctor","inner":[]}],"parameters":{},"annotations":[]},"single":{"name":"single","qualifiedName":"fletch/fletch.Fletch.single","comment":"<p>Returns the single element in <code>this</code>.</p>\n<p>If <code>this</code> is empty or has more than one element throws a <a>dart-core.StateError</a>.</p>","commentFrom":"dart-core.Iterable.single","inheritedFrom":"dart-core.IterableBase.single","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"submit":{"name":"submit","qualifiedName":"fletch/fletch.Fletch.submit","comment":"<p>Shorthand for <code>event[\"submit\"]</code></p>","commentFrom":"","inheritedFrom":"fletch.IterableBase+_EventMixin.submit","static":false,"abstract":false,"constant":false,"return":[{"outer":"fletch/fletch.EventFunctor","inner":[]}],"parameters":{},"annotations":[]},"unload":{"name":"unload","qualifiedName":"fletch/fletch.Fletch.unload","comment":"<p>Shorthand for <code>event[\"unload\"]</code></p>","commentFrom":"","inheritedFrom":"fletch.IterableBase+_EventMixin.unload","static":false,"abstract":false,"constant":false,"return":[{"outer":"fletch/fletch.EventFunctor","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"fletch/fletch.Fletch.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>fletch/fletch.Fletch.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>fletch/fletch.Fletch.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"any":{"name":"any","qualifiedName":"fletch/fletch.Fletch.any","comment":"<p>Returns true if one element of this collection satisfies the\npredicate test. Returns false otherwise.</p>","commentFrom":"dart-core.Iterable.any","inheritedFrom":"dart-core.IterableBase.any","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.IterableBase.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"contains":{"name":"contains","qualifiedName":"fletch/fletch.Fletch.contains","comment":"<p>Returns true if the collection contains an element equal to <a>fletch/fletch.Fletch.contains.element</a>.</p>\n<p>The equality used to determine wheter <a>fletch/fletch.Fletch.contains.element</a> is equal to an element of\nthe iterable, depends on the type of iterable.\nFor example, a <a>dart-core.Set</a> may have a custom equality\n(see, e.g., Set.identical) that its <code>contains</code> uses.\nLikewise the <code>Iterable</code> returned by a <a>fletch/dart-core.Map.keys</a> call\nwill likely use the same equality that the <code>Map</code> uses for keys.</p>","commentFrom":"dart-core.Iterable.contains","inheritedFrom":"dart-core.IterableBase.contains","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"elementAt":{"name":"elementAt","qualifiedName":"fletch/fletch.Fletch.elementAt","comment":"<p>Returns the <a>fletch/fletch.Fletch.elementAt.index</a>th element.</p>\n<p>The <a>fletch/fletch.Fletch.elementAt.index</a> must be non-negative and less than <a>fletch/fletch.Fletch.length</a>.</p>\n<p>Note: if <code>this</code> does not have a deterministic iteration order then the\nfunction may simply return any element without any iteration if there are\nat least <a>fletch/fletch.Fletch.elementAt.index</a> elements in <code>this</code>.</p>","commentFrom":"dart-core.Iterable.elementAt","inheritedFrom":"dart-core.IterableBase.elementAt","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"index":{"name":"index","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"every":{"name":"every","qualifiedName":"fletch/fletch.Fletch.every","comment":"<p>Returns true if every elements of this collection satisify the\npredicate test. Returns <code>false</code> otherwise.</p>","commentFrom":"dart-core.Iterable.every","inheritedFrom":"dart-core.IterableBase.every","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.IterableBase.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"expand":{"name":"expand","qualifiedName":"fletch/fletch.Fletch.expand","comment":"<p>Expands each element of this <a>dart-core.Iterable</a> into zero or more elements.</p>\n<p>The resulting Iterable runs through the elements returned\nby <a>fletch/fletch.Fletch.expand.f</a> for each element of this, in order.</p>\n<p>The returned <a>dart-core.Iterable</a> is lazy, and calls <a>fletch/fletch.Fletch.expand.f</a> for each element\nof this every time it's iterated.</p>","commentFrom":"dart-core.Iterable.expand","inheritedFrom":"dart-core.IterableBase.expand","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[]}],"parameters":{"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.Iterable","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.IterableBase.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"firstWhere":{"name":"firstWhere","qualifiedName":"fletch/fletch.Fletch.firstWhere","comment":"<p>Returns the first element that satisfies the given predicate <a>fletch/fletch.Fletch.firstWhere.test</a>.</p>\n<p>If none matches, the result of invoking the <a>fletch/fletch.Fletch.firstWhere.orElse</a> function is\nreturned. By default, when <a>fletch/fletch.Fletch.firstWhere.orElse</a> is <code>null</code>, a <a>dart-core.StateError</a> is\nthrown.</p>","commentFrom":"dart-core.Iterable.firstWhere","inheritedFrom":"dart-core.IterableBase.firstWhere","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.IterableBase.E","inner":[]}],"value":null,"annotations":[]}}}},"orElse":{"name":"orElse","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.Object","inner":[]}],"parameters":{}}}},"annotations":[]},"fold":{"name":"fold","qualifiedName":"fletch/fletch.Fletch.fold","comment":"<p>Reduces a collection to a single value by iteratively combining each\nelement of the collection with an existing value using the provided\nfunction.</p>\n<p>Use <a>fletch/fletch.Fletch.fold.initialValue</a> as the initial value, and the function <a>fletch/fletch.Fletch.fold.combine</a> to\ncreate a new value from the previous one and an element.</p>\n<p>Example of calculating the sum of an iterable:</p>\n<pre><code>iterable.fold(0, (prev, element) =&gt; prev + element);\n</code></pre>","commentFrom":"dart-core.Iterable.fold","inheritedFrom":"dart-core.IterableBase.fold","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"initialValue":{"name":"initialValue","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"combine":{"name":"combine","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dynamic","inner":[]}],"parameters":{"previousValue":{"name":"previousValue","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.IterableBase.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"forEach":{"name":"forEach","qualifiedName":"fletch/fletch.Fletch.forEach","comment":"<p>Applies the function <a>fletch/fletch.Fletch.forEach.f</a> to each element of this collection.</p>","commentFrom":"dart-core.Iterable.forEach","inheritedFrom":"dart-core.IterableBase.forEach","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"void","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.IterableBase.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"join":{"name":"join","qualifiedName":"fletch/fletch.Fletch.join","comment":"<p>Converts each element to a <a>dart-core.String</a> and concatenates the strings.</p>\n<p>Converts each element to a <a>dart-core.String</a> by calling <a>fletch/fletch.Fletch.toString</a> on it.\nThen concatenates the strings, optionally separated by the <a>fletch/fletch.Fletch.join.separator</a>\nstring.</p>","commentFrom":"dart-core.Iterable.join","inheritedFrom":"dart-core.IterableBase.join","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"separator":{"name":"separator","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.String","inner":[]}],"value":"\"\"","annotations":[]}},"annotations":[]},"lastWhere":{"name":"lastWhere","qualifiedName":"fletch/fletch.Fletch.lastWhere","comment":"<p>Returns the last element that satisfies the given predicate <a>fletch/fletch.Fletch.lastWhere.test</a>.</p>\n<p>If none matches, the result of invoking the <a>fletch/fletch.Fletch.lastWhere.orElse</a> function is\nreturned. By default, when <a>fletch/fletch.Fletch.lastWhere.orElse</a> is <code>null</code>, a <a>dart-core.StateError</a> is\nthrown.</p>","commentFrom":"dart-core.Iterable.lastWhere","inheritedFrom":"dart-core.IterableBase.lastWhere","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.IterableBase.E","inner":[]}],"value":null,"annotations":[]}}}},"orElse":{"name":"orElse","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.Object","inner":[]}],"parameters":{}}}},"annotations":[]},"map":{"name":"map","qualifiedName":"fletch/fletch.Fletch.map","comment":"<p>Returns a lazy <a>dart-core.Iterable</a> where each element <code>e</code> of <code>this</code> is replaced\nby the result of <code>f(e)</code>.</p>\n<p>This method returns a view of the mapped elements. As long as the\nreturned <a>dart-core.Iterable</a> is not iterated over, the supplied function <a>fletch/fletch.Fletch.map.f</a> will\nnot be invoked. The transformed elements will not be cached. Iterating\nmultiple times over the the returned <a>dart-core.Iterable</a> will invoke the supplied\nfunction <a>fletch/fletch.Fletch.map.f</a> multiple times on the same element.</p>","commentFrom":"dart-core.Iterable.map","inheritedFrom":"dart-core.IterableBase.map","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[]}],"parameters":{"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dynamic","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.IterableBase.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"fletch/fletch.Fletch.noSuchMethod","comment":"<p><a>fletch/fletch.Fletch.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>fletch/fletch.Fletch.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>fletch/fletch.Fletch.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>fletch/fletch.Fletch.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"reduce":{"name":"reduce","qualifiedName":"fletch/fletch.Fletch.reduce","comment":"<p>Reduces a collection to a single value by iteratively combining elements\nof the collection using the provided function.</p>\n<p>Example of calculating the sum of an iterable:</p>\n<pre><code>iterable.reduce((value, element) =&gt; value + element);\n</code></pre>","commentFrom":"dart-core.Iterable.reduce","inheritedFrom":"dart-core.IterableBase.reduce","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"combine":{"name":"combine","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.IterableBase.E","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.IterableBase.E","inner":[]}],"value":null,"annotations":[]},"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.IterableBase.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"singleWhere":{"name":"singleWhere","qualifiedName":"fletch/fletch.Fletch.singleWhere","comment":"<p>Returns the single element that satisfies <a>fletch/fletch.Fletch.singleWhere.test</a>. If no or more than one\nelement match then a <a>dart-core.StateError</a> is thrown.</p>","commentFrom":"dart-core.Iterable.singleWhere","inheritedFrom":"dart-core.IterableBase.singleWhere","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.IterableBase.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"skip":{"name":"skip","qualifiedName":"fletch/fletch.Fletch.skip","comment":"<p>Returns an Iterable that skips the first <a>fletch/fletch.Fletch.skip.n</a> elements.</p>\n<p>If <code>this</code> has fewer than <a>fletch/fletch.Fletch.skip.n</a> elements, then the resulting Iterable is\nempty.</p>\n<p>It is an error if <a>fletch/fletch.Fletch.skip.n</a> is negative.</p>","commentFrom":"dart-core.Iterable.skip","inheritedFrom":"dart-core.IterableBase.skip","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{"n":{"name":"n","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"skipWhile":{"name":"skipWhile","qualifiedName":"fletch/fletch.Fletch.skipWhile","comment":"<p>Returns an Iterable that skips elements while <a>fletch/fletch.Fletch.skipWhile.test</a> is satisfied.</p>\n<p>The filtering happens lazily. Every new Iterator of the returned\nIterable iterates over all elements of <code>this</code>.</p>\n<p>As long as the iterator's elements satisfy <a>fletch/fletch.Fletch.skipWhile.test</a> they are\ndiscarded. Once an element does not satisfy the <a>fletch/fletch.Fletch.skipWhile.test</a> the iterator stops\ntesting and uses every later element unconditionally. That is, the elements\nof the returned Iterable are the elements of <code>this</code> starting from the\nfirst element that does not satisfy <a>fletch/fletch.Fletch.skipWhile.test</a>.</p>","commentFrom":"dart-core.Iterable.skipWhile","inheritedFrom":"dart-core.IterableBase.skipWhile","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.IterableBase.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"take":{"name":"take","qualifiedName":"fletch/fletch.Fletch.take","comment":"<p>Returns an <a>dart-core.Iterable</a> with at most <a>fletch/fletch.Fletch.take.n</a> elements.</p>\n<p>The returned <a>dart-core.Iterable</a> may contain fewer than <a>fletch/fletch.Fletch.take.n</a> elements, if <code>this</code>\ncontains fewer than <a>fletch/fletch.Fletch.take.n</a> elements.</p>\n<p>It is an error if <a>fletch/fletch.Fletch.take.n</a> is negative.</p>","commentFrom":"dart-core.Iterable.take","inheritedFrom":"dart-core.IterableBase.take","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{"n":{"name":"n","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"takeWhile":{"name":"takeWhile","qualifiedName":"fletch/fletch.Fletch.takeWhile","comment":"<p>Returns an Iterable that stops once <a>fletch/fletch.Fletch.takeWhile.test</a> is not satisfied anymore.</p>\n<p>The filtering happens lazily. Every new Iterator of the returned\nIterable starts iterating over the elements of <code>this</code>.</p>\n<p>When the iterator encounters an element <code>e</code> that does not satisfy <a>fletch/fletch.Fletch.takeWhile.test</a>,\nit discards <code>e</code> and moves into the finished state. That is, it does not\nget or provide any more elements.</p>","commentFrom":"dart-core.Iterable.takeWhile","inheritedFrom":"dart-core.IterableBase.takeWhile","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.IterableBase.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"toList":{"name":"toList","qualifiedName":"fletch/fletch.Fletch.toList","comment":"<p>Creates a <a>dart-core.List</a> containing the elements of this <a>dart-core.Iterable</a>.</p>\n<p>The elements are in iteration order. The list is fixed-length\nif <a>fletch/fletch.Fletch.toList.growable</a> is false.</p>","commentFrom":"dart-core.Iterable.toList","inheritedFrom":"dart-core.IterableBase.toList","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{"growable":{"name":"growable","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"true","annotations":[]}},"annotations":[]},"toSet":{"name":"toSet","qualifiedName":"fletch/fletch.Fletch.toSet","comment":"<p>Creates a <a>dart-core.Set</a> containing the same elements as this iterable.</p>\n<p>The returned <code>Set</code> will have the same <code>Set.length</code>\nas the <code>length</code> of this iterable,\nand its <code>Set.contains</code> will return the same result\nas the <code>contains</code> of this iterable.\nThe order of the elements may be different.</p>","commentFrom":"dart-core.Iterable.toSet","inheritedFrom":"dart-core.IterableBase.toSet","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Set","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{},"annotations":[]},"toString":{"name":"toString","qualifiedName":"fletch/fletch.Fletch.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"where":{"name":"where","qualifiedName":"fletch/fletch.Fletch.where","comment":"<p>Returns a lazy <a>dart-core.Iterable</a> with all elements that satisfy the\npredicate test.</p>\n<p>This method returns a view of the mapped elements. As long as the\nreturned <a>dart-core.Iterable</a> is not iterated over, the supplied function test will\nnot be invoked. Iterating will not cache results, and thus iterating\nmultiple times over the returned <a>dart-core.Iterable</a> will invoke the supplied\nfunction test multiple times on the same element.</p>","commentFrom":"dart-core.Iterable.where","inheritedFrom":"dart-core.IterableBase.where","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.IterableBase.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]}}},"annotations":[],"generics":{}}